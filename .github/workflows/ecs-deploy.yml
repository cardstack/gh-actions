name: Deploy service to ECS

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      cluster:
        required: true
        type: string
      image:
        required: true
        type: string
      container-name:
        required: true
        type: string
      service-name:
        required: true
        type: string
      timeout-minutes:
        required: false
        type: number
        default: 5

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    concurrency:
      group: ecs-deploy-${{ inputs.service-name }}-${{ inputs.environment }}-${{ github.head_ref || github.run_id }}
    steps:
      - name: Set up env
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "AWS_ROLE_ARN=arn:aws:iam::120317779495:role/github" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" = "staging" ]; then
            echo "AWS_ROLE_ARN=arn:aws:iam::680542703984:role/github" >> $GITHUB_ENV
          else
            echo "unrecognized environment"
            exit 1;
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Fetch latest task definition
        run: >
          aws ecs describe-task-definition
          --task-definition ${{ inputs.service-name }}
          --query taskDefinition
          > task-definition.json

      - id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.container-name }}
          image: ${{ inputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service-name }}
          cluster: ${{ inputs.cluster }}
          wait-for-service-stability: true
          force-new-deployment: true
          wait-for-minutes: ${{ inputs.timeout-minutes }}
